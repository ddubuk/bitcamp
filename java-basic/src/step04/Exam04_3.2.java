// 비트 이동 연산자 : >>, >>>, << 
package step04;

public class Exam04_3 {
    public static void main(String[] args) {
        int i = 0b11111111_11111111_11111111_10101001; //-87
        System.out.println(i);
        System.out.println(i >> 1); 
        //1_11111111_11111111_11111111_1010100|1

        //왼쪽의 빈자리는 부호비트로 채운다.
        System.out.println(i >>> 2);
        System.out.println(i >>> 3);
        System.out.println(i >>> 4);
        //연산자를 사용하여 오른쪽으로 이동한다면,
        //왼쪽 빈자리는 무조건 0으로 채운다
        //그래서 양수일 때는 >> 연산자와 같은 결과가 나오지만
        //다음과 같이 음수 일 때는 양수로 바뀌는 결과가 나온다.

        int j = 0b11111111_11111111_11111111_10101001; //-87
        System.out.println(i);
        System.out.println(i >>> 1); 
        //1_11111111_11111111_11111111_1010100|1
        //왼쪽 빈자리는 숫자의 부호비트로 채운다
        //음수니까 1로 채운다
        //2로 나눈 후에 소수점이 있으면
        //그 수보다 더 작은 정수값이 되는 효과가 있다.

        //왼쪽의 빈자리는 부호비트로 채운다.
        System.out.println(j >>> 2);
        //00_11111111_11111111_11111111_101010|01 => -22
        
        System.out.println(j >>> 3);
        //000_11111111_11111111_11111111_10101|01
        
        System.out.println(j >>> 4);
        //0000_11111111_11111111_11111111_1010|01
    }
}
//오른쪽 이동
//1비트 이동은 나누기 2 한 것과 같은 효과를 준다.
//소수점 이하는 잘리는 효과를 갖는다.
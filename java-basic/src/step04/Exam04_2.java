// 비트 이동 연산자 : >>, >>>, << 
package step04;

public class Exam04_2 {
    public static void main(String[] args) {
        int i = 0b11111111_11111111_11111111_10101001; //-87
        System.out.println(i);
        System.out.println(i >> 1); 
        //1_11111111_11111111_11111111_1010100|1

        System.out.println(i << 2); //00011010|0 => 26
        System.out.println(i << 3); //00001101|0 => 13
        System.out.println(i << 4); //00000110|1 => 6 //소수점 이하는 잘린다.
        //오른쪽으로 이동 후,
        //오른쪽 빈자리는 원래 숫자와 같은 수로 값으로 채운다
        //                양수 0, 음수 1
        //오른쪽의 넘친 비트는 자른다.

        //음수의 경우
        // i = 0b11111111_11111111_11111111_10101001

        int j = 0b11111111_11111111_11111111_10101001; //-87
        System.out.println(j);
        System.out.println(j >> 1); 
        //1_11111111_11111111_11111111_1010100|1
        //왼쪽 빈자리는 숫자의 부호비트로 채운다
        //음수니까 1로 채운다
        //2로 나눈 후에 소수점이 있으면
        //그 수보다 더 작은 정수값이 되는 효과가 있다.

        //왼쪽의 빈자리는 부호비트로 채운다.
        System.out.println(j >> 2);
        //11_11111111_11111111_11111111_101010|01 => -22
        
        System.out.println(j >> 3);
        //111_11111111_11111111_11111111_10101|01
        
        System.out.println(j >> 4);
        //1111_11111111_11111111_11111111_1010|01
    }
}
//오른쪽 이동
//1비트 이동은 나누기 2 한 것과 같은 효과를 준다.
//소수점 이하는 잘리는 효과를 갖는다.